-- DUMP DB MYSQL- SISTEMA GESTIONE PRENOTAZIONI VOLI 
--Progettazione dello schema di persistenza dei dati a supporto dei servizi di un’azienda nel settore dei trasporti 
--UNIPEGASO NICOLO GONNELLA 0312300520
-- Creazione del database
CREATE DATABASE IF NOT EXISTS GestionePrenotazioniVoli;
USE GestionePrenotazioniVoli;

-- CREAZIONE TABELLE

-- PASSEGGERO
CREATE TABLE Passeggero (
    ID_Passeggero INT PRIMARY KEY AUTO_INCREMENT,
    Nome VARCHAR(50) NOT NULL,
    Cognome VARCHAR(50) NOT NULL,
    Data_Nascita DATE NOT NULL,
    Documento_Identita VARCHAR(20) UNIQUE NOT NULL,
    Telefono VARCHAR(20),
    Email VARCHAR(100) UNIQUE NOT NULL,
    Codice_Fiscale VARCHAR(16) UNIQUE NOT NULL
);

-- AEREO
CREATE TABLE Aereo (
    ID_Aereo INT PRIMARY KEY AUTO_INCREMENT,
    Modello VARCHAR(50) NOT NULL,
    Capacita_Totale INT NOT NULL,
    Capacita_Economy INT NOT NULL,
    Capacita_Business INT NOT NULL,
    Capacita_First INT NOT NULL,
    CONSTRAINT chk_capacita_logica
        CHECK (Capacita_Totale = Capacita_Economy + Capacita_Business + Capacita_First),
    CONSTRAINT chk_capacita_positive
        CHECK (Capacita_Totale > 0
               AND Capacita_Economy >= 0
               AND Capacita_Business >= 0
               AND Capacita_First >= 0)
);

-- AEROPORTO
CREATE TABLE Aeroporto (
    Codice_Aeroporto CHAR(3) PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL,
    Citta VARCHAR(50) NOT NULL,
    Nazione VARCHAR(50) NOT NULL,
    Fuso_Orario VARCHAR(10) NOT NULL
);

-- VOLO
CREATE TABLE Volo (
    ID_Volo INT PRIMARY KEY AUTO_INCREMENT,
    Numero_Volo VARCHAR(10) NOT NULL,
    Data_Volo DATE NOT NULL,
    Data_Arrivo DATE NOT NULL,
    Ora_Partenza TIME NOT NULL,
    Ora_Arrivo TIME NOT NULL,
    Prezzo_Economy DECIMAL(10,2) NOT NULL,
    Prezzo_Business DECIMAL(10,2) NOT NULL,
    Prezzo_First DECIMAL(10,2) NOT NULL,
    ID_Aereo INT NOT NULL,
    Aeroporto_Partenza CHAR(3) NOT NULL,
    Aeroporto_Arrivo CHAR(3) NOT NULL,
    FOREIGN KEY (ID_Aereo) REFERENCES Aereo(ID_Aereo),
    FOREIGN KEY (Aeroporto_Partenza) REFERENCES Aeroporto(Codice_Aeroporto),
    FOREIGN KEY (Aeroporto_Arrivo) REFERENCES Aeroporto(Codice_Aeroporto),
    CONSTRAINT chk_prezzi_positivi CHECK (
        Prezzo_Economy > 0
        AND Prezzo_Business > 0
        AND Prezzo_First > 0
    ),
    UNIQUE (Numero_Volo, Data_Volo) -- lo stesso codice può esistere in giorni diversi
);


-- PRENOTAZIONE
CREATE TABLE Prenotazione (
    ID_Prenotazione INT PRIMARY KEY AUTO_INCREMENT,
    PNR CHAR(6) UNIQUE NOT NULL,
    Data_Prenotazione TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Stato_Prenotazione ENUM('Confermata', 'Annullata', 'Scaduta') DEFAULT 'Confermata',
    Prezzo_Totale DECIMAL(10,2) NOT NULL,
    ID_Passeggero INT NOT NULL,
    FOREIGN KEY (ID_Passeggero) REFERENCES Passeggero(ID_Passeggero),
    CONSTRAINT chk_prezzo_totale_positivo CHECK (Prezzo_Totale > 0)
);

-- MODIFICA PRENOTAZIONE (storico modifiche)
CREATE TABLE Modifica_Prenotazione (
    ID_Modifica INT PRIMARY KEY AUTO_INCREMENT,
    ID_Prenotazione INT NOT NULL,
    Data_Modifica TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Tipo_Modifica ENUM(
        'Cambio_Volo',
        'Cambio_Passeggero',
        'Modifica_Classe',
        'Annullamento'
    ) NOT NULL,
    Dettagli_Modifica TEXT,
    Costo_Modifica DECIMAL(10,2) DEFAULT 0,
    Stato_Modifica ENUM('In_Elaborazione', 'Completata', 'Rifiutata') DEFAULT 'In_Elaborazione',
    FOREIGN KEY (ID_Prenotazione) REFERENCES Prenotazione(ID_Prenotazione),
    CONSTRAINT chk_costo_modifica CHECK (Costo_Modifica >= 0)
);

-- PAGAMENTO
CREATE TABLE Pagamento (
    ID_Pagamento INT PRIMARY KEY AUTO_INCREMENT,
    Importo DECIMAL(10,2) NOT NULL,
    Metodo_Pagamento ENUM('Carta_Credito', 'Carta_Debito', 'PayPal', 'Bonifico') NOT NULL,
    Data_Pagamento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Stato_Pagamento ENUM('Completato', 'Fallito', 'In_Corso') DEFAULT 'In_Corso',
    ID_Prenotazione INT UNIQUE NOT NULL,
    FOREIGN KEY (ID_Prenotazione) REFERENCES Prenotazione(ID_Prenotazione),
    CONSTRAINT chk_importo_positivo CHECK (Importo > 0)
);

-- BIGLIETTO
CREATE TABLE Biglietto (
    ID_Biglietto INT PRIMARY KEY AUTO_INCREMENT,
    Numero_Posto VARCHAR(5) NOT NULL,
    Classe_Servizio ENUM('Economy', 'Business', 'First') NOT NULL,
    Check_In_Effettuato BOOLEAN DEFAULT FALSE,
    Stato_Biglietto ENUM('Valido', 'Utilizzato', 'Annullato') DEFAULT 'Valido',
    ID_Prenotazione INT NOT NULL,
    ID_Volo INT NOT NULL,
    FOREIGN KEY (ID_Prenotazione) REFERENCES Prenotazione(ID_Prenotazione),
    FOREIGN KEY (ID_Volo) REFERENCES Volo(ID_Volo)
);

-- SCALO
CREATE TABLE Scalo (
    ID_Scalo INT PRIMARY KEY AUTO_INCREMENT,
    ID_Prenotazione INT NOT NULL,
    ID_Volo INT NOT NULL,
    Ordine_Scalo INT NOT NULL, -- posizione del volo nel viaggio
    FOREIGN KEY (ID_Prenotazione) REFERENCES Prenotazione(ID_Prenotazione),
    FOREIGN KEY (ID_Volo) REFERENCES Volo(ID_Volo),
    CONSTRAINT uq_prenotazione_ordine UNIQUE (ID_Prenotazione, Ordine_Scalo)
);

--INDICI PER OTTIMIZZAZIONE

CREATE INDEX idx_volo_numero_data ON Volo (Numero_Volo, Data_Volo);
CREATE INDEX idx_prenotazione_passeggero ON Prenotazione (ID_Passeggero);
CREATE UNIQUE INDEX idx_prenotazione_pnr ON Prenotazione(PNR);
CREATE INDEX idx_pagamento_prenotazione_stato ON Pagamento(ID_Prenotazione, Stato_Pagamento);
CREATE INDEX idx_modifica_prenotazione ON Modifica_Prenotazione (ID_Prenotazione);
CREATE INDEX idx_biglietto_prenotazione ON Biglietto (ID_Prenotazione);
CREATE INDEX idx_biglietto_volo ON Biglietto (ID_Volo);
CREATE INDEX idx_biglietto_stato_classe ON Biglietto(Stato_Biglietto, Classe_Servizio);
CREATE INDEX idx_scalo_prenotazione ON Scalo (ID_Prenotazione);
CREATE INDEX idx_scalo_volo ON Scalo (ID_Volo);

-- TRIGGER DI COERENZA


-- Log modifiche su Prenotazione
DELIMITER $$
CREATE TRIGGER trg_log_modifica_prenotazione
AFTER UPDATE ON Prenotazione
FOR EACH ROW
BEGIN
    -- Cambio passeggero
    IF NEW.ID_Passeggero <> OLD.ID_Passeggero THEN
        INSERT INTO Modifica_Prenotazione
            (ID_Prenotazione, Tipo_Modifica, Dettagli_Modifica, Costo_Modifica, Stato_Modifica)
        VALUES
            (NEW.ID_Prenotazione, 'Cambio_Passeggero',
             CONCAT('Passeggero cambiato da ', OLD.ID_Passeggero, ' a ', NEW.ID_Passeggero),
             0, 'Completata');
    END IF;

    -- Cambio prezzo (interpretabile come cambio classe)
    IF NEW.Prezzo_Totale <> OLD.Prezzo_Totale THEN
        INSERT INTO Modifica_Prenotazione
            (ID_Prenotazione, Tipo_Modifica, Dettagli_Modifica, Costo_Modifica, Stato_Modifica)
        VALUES
            (NEW.ID_Prenotazione, 'Modifica_Classe',
             CONCAT('Prezzo da ', OLD.Prezzo_Totale, ' a ', NEW.Prezzo_Totale),
             (NEW.Prezzo_Totale - OLD.Prezzo_Totale), 'Completata');
    END IF;

    -- Cambio stato prenotazione
    IF NEW.Stato_Prenotazione <> OLD.Stato_Prenotazione THEN
        INSERT INTO Modifica_Prenotazione
            (ID_Prenotazione, Tipo_Modifica, Dettagli_Modifica, Stato_Modifica)
        VALUES
            (NEW.ID_Prenotazione,
             CASE WHEN NEW.Stato_Prenotazione = 'Annullata' THEN 'Annullamento' ELSE 'Modifica_Classe' END,
             CONCAT('Stato cambiato da ', OLD.Stato_Prenotazione, ' a ', NEW.Stato_Prenotazione),
             0, 'Completata');
    END IF;
END$$
DELIMITER ;

-- Log modifiche su Scalo (Cambio_Volo)
DELIMITER $$
CREATE TRIGGER trg_log_cambio_volo
AFTER UPDATE ON Scalo
FOR EACH ROW
BEGIN
    IF NEW.ID_Volo <> OLD.ID_Volo THEN
        INSERT INTO Modifica_Prenotazione
            (ID_Prenotazione, Tipo_Modifica, Dettagli_Modifica, Stato_Modifica)
        VALUES
            (NEW.ID_Prenotazione, 'Cambio_Volo',
             CONCAT('Volo cambiato da ', OLD.ID_Volo, ' a ', NEW.ID_Volo),
             0, 'Completata');
    END IF;
END$$
DELIMITER ;


-- QUERY RAPPRESENTATIVE

-- 1. Ricerca voli disponibili tra due aeroporti in una data specifica

SELECT
    v.Numero_Volo,
    v.Data_Volo,
    v.Ora_Partenza,
    v.Ora_Arrivo,
    a.Modello AS Aereo,
    (a.Capacita_Economy - COALESCE(posti_occupati.Economy, 0)) AS Posti_Economy_Disponibili,
    (a.Capacita_Business - COALESCE(posti_occupati.Business, 0)) AS Posti_Business_Disponibili,
    (a.Capacita_First - COALESCE(posti_occupati.First, 0)) AS Posti_First_Disponibili,
    ap.Nome AS Aeroporto_Partenza,
    aa.Nome AS Aeroporto_Arrivo
FROM Volo v
JOIN Aeroporto ap ON v.Aeroporto_Partenza = ap.Codice_Aeroporto
JOIN Aeroporto aa ON v.Aeroporto_Arrivo = aa.Codice_Aeroporto
JOIN Aereo a ON v.ID_Aereo = a.ID_Aereo
LEFT JOIN (
    SELECT
        b.ID_Volo,
        SUM(CASE WHEN b.Classe_Servizio = 'Economy' THEN 1 ELSE 0 END) AS Economy,
        SUM(CASE WHEN b.Classe_Servizio = 'Business' THEN 1 ELSE 0 END) AS Business,
        SUM(CASE WHEN b.Classe_Servizio = 'First' THEN 1 ELSE 0 END) AS First
    FROM Biglietto b
    JOIN Prenotazione p ON b.ID_Prenotazione = p.ID_Prenotazione
    WHERE p.Stato_Prenotazione = 'Confermata' AND b.Stato_Biglietto = 'Valido'
    GROUP BY b.ID_Volo
) posti_occupati ON v.ID_Volo = posti_occupati.ID_Volo
WHERE v.Data_Volo = '2025-09-1'
    AND v.Aeroporto_Partenza = 'FCO'
    AND v.Aeroporto_Arrivo = 'MXP'
    AND (a.Capacita_Economy - COALESCE(posti_occupati.Economy, 0)) > 0
ORDER BY v.Ora_Partenza;


-- 2. Storico prenotazioni e voli di un cliente specifico

SELECT
    p.PNR,
    p.Data_Prenotazione,
    p.Stato_Prenotazione,
    p.Prezzo_Totale,
    COUNT(b.ID_Biglietto) AS Numero_Biglietti,
    GROUP_CONCAT(
        CONCAT(v.Numero_Volo, ' (', ap.Citta, '-', aa.Citta, ')')
        ORDER BY v.Data_Volo, v.Ora_Partenza
        SEPARATOR ', '
    ) AS Voli,
    GROUP_CONCAT(
        CONCAT('Scalo ', s.Ordine_Scalo, ': Volo ID ', s.ID_Volo)
        ORDER BY s.Ordine_Scalo
        SEPARATOR '; '
    ) AS Scali
FROM Prenotazione p
JOIN Passeggero pa ON p.ID_Passeggero = pa.ID_Passeggero
JOIN Biglietto b ON p.ID_Prenotazione = b.ID_Prenotazione
JOIN Volo v ON b.ID_Volo = v.ID_Volo
JOIN Aeroporto ap ON v.Aeroporto_Partenza = ap.Codice_Aeroporto
JOIN Aeroporto aa ON v.Aeroporto_Arrivo = aa.Codice_Aeroporto
LEFT JOIN Scalo s ON p.ID_Prenotazione = s.ID_Prenotazione
WHERE pa.Email = 'luca.rossi@email.com'
GROUP BY p.ID_Prenotazione
ORDER BY p.Data_Prenotazione DESC;


-- 3. Dettagli biglietto e pagamento

SELECT
    b.ID_Biglietto,
    b.Numero_Posto,
    b.Classe_Servizio,
    b.Check_In_Effettuato,
    b.Stato_Biglietto,
    p.PNR,
    pa.Nome,
    pa.Cognome,
    pa.Documento_Identita,
    v.Numero_Volo,
    v.Data_Volo,
    v.Ora_Partenza,
    v.Ora_Arrivo,
    ap.Nome AS Aeroporto_Partenza,
    aa.Nome AS Aeroporto_Arrivo,
    pag.Stato_Pagamento
FROM Biglietto b
JOIN Prenotazione p ON b.ID_Prenotazione = p.ID_Prenotazione
JOIN Passeggero pa ON p.ID_Passeggero = pa.ID_Passeggero
JOIN Volo v ON b.ID_Volo = v.ID_Volo
JOIN Aeroporto ap ON v.Aeroporto_Partenza = ap.Codice_Aeroporto
JOIN Aeroporto aa ON v.Aeroporto_Arrivo = aa.Codice_Aeroporto
JOIN Pagamento pag ON p.ID_Prenotazione = pag.ID_Prenotazione
WHERE p.PNR = 'ABC123'
    AND b.Stato_Biglietto = 'Valido'
    AND p.Stato_Prenotazione = 'Confermata'
    AND pag.Stato_Pagamento = 'Completato';


-- 4. Statistiche di occupazione per volo

SELECT
    v.Numero_Volo,
    v.Data_Volo,
    ap.Citta AS Partenza,
    aa.Citta AS Arrivo,
    a.Capacita_Totale,
    COUNT(b.ID_Biglietto) AS Posti_Venduti,
    ROUND((COUNT(b.ID_Biglietto) / a.Capacita_Totale) * 100, 2) AS Percentuale_Occupazione,
    SUM(CASE WHEN b.Classe_Servizio = 'Economy' THEN 1 ELSE 0 END) AS Economy_Venduti,
    SUM(CASE WHEN b.Classe_Servizio = 'Business' THEN 1 ELSE 0 END) AS Business_Venduti,
    SUM(CASE WHEN b.Classe_Servizio = 'First' THEN 1 ELSE 0 END) AS First_Venduti
FROM Volo v
JOIN Aeroporto ap ON v.Aeroporto_Partenza = ap.Codice_Aeroporto
JOIN Aeroporto aa ON v.Aeroporto_Arrivo = aa.Codice_Aeroporto
JOIN Aereo a ON v.ID_Aereo = a.ID_Aereo
LEFT JOIN Biglietto b ON v.ID_Volo = b.ID_Volo
LEFT JOIN Prenotazione p ON b.ID_Prenotazione = p.ID_Prenotazione
WHERE (p.Stato_Prenotazione = 'Confermata' OR p.Stato_Prenotazione IS NULL)
    AND (b.Stato_Biglietto = 'Valido' OR b.Stato_Biglietto IS NULL)
    AND v.Data_Volo BETWEEN '2025-08-01' AND '2025-10-01'
GROUP BY v.ID_Volo
ORDER BY v.Data_Volo, v.Ora_Partenza;


-- 5. Ricavi giornalieri

SELECT
    DATE(p.Data_Prenotazione) AS Data,
    COUNT(DISTINCT p.ID_Prenotazione) AS Prenotazioni_Totali,
    COUNT(b.ID_Biglietto) AS Biglietti_Venduti,
    SUM(p.Prezzo_Totale) AS Ricavi_Totali,
    AVG(p.Prezzo_Totale) AS Ricavo_Medio_Prenotazione,
    SUM(CASE WHEN b.Classe_Servizio = 'Economy' THEN 1 ELSE 0 END) AS Biglietti_Economy,
    SUM(CASE WHEN b.Classe_Servizio = 'Business' THEN 1 ELSE 0 END) AS Biglietti_Business,
    SUM(CASE WHEN b.Classe_Servizio = 'First' THEN 1 ELSE 0 END) AS Biglietti_First
FROM Prenotazione p
JOIN Biglietto b ON p.ID_Prenotazione = b.ID_Prenotazione
JOIN Pagamento pag ON p.ID_Prenotazione = pag.ID_Prenotazione
WHERE p.Stato_Prenotazione = 'Confermata'
    AND pag.Stato_Pagamento = 'Completato'
    AND DATE(p.Data_Prenotazione) BETWEEN '2025-07-01' AND '2025-10-01'
GROUP BY DATE(p.Data_Prenotazione)
ORDER BY Data;


-- 6. Biglietti di un passeggero tramite codice fiscale

SELECT
    b.ID_Biglietto,
    b.Numero_Posto,
    v.Numero_Volo,
    v.Data_Volo,
    v.Ora_Partenza,
    v.Ora_Arrivo,
    b.Classe_Servizio,
    ap.Citta AS Citta_Partenza,
    aa.Citta AS Citta_Arrivo,
    pr.PNR,
    b.Stato_Biglietto
FROM Biglietto b
JOIN Prenotazione pr ON b.ID_Prenotazione = pr.ID_Prenotazione
JOIN Passeggero p ON pr.ID_Passeggero = p.ID_Passeggero
JOIN Volo v ON b.ID_Volo = v.ID_Volo
JOIN Aeroporto ap ON v.Aeroporto_Partenza = ap.Codice_Aeroporto
JOIN Aeroporto aa ON v.Aeroporto_Arrivo = aa.Codice_Aeroporto
WHERE p.Codice_Fiscale = 'RSSLCU85B15H501A'
    AND pr.Stato_Prenotazione = 'Confermata'
ORDER BY v.Data_Volo, v.Ora_Partenza;


-- 7. Passeggeri partenza da un aeroporto specifico

SELECT DISTINCT
    p.Nome,
    p.Cognome,
    p.Codice_Fiscale,
    p.Email,
    pr.PNR,
    v.Numero_Volo,
    v.Ora_Partenza,
    b.Classe_Servizio,
    b.Numero_Posto
FROM Passeggero p
JOIN Prenotazione pr ON p.ID_Passeggero = pr.ID_Passeggero
JOIN Biglietto b ON pr.ID_Prenotazione = b.ID_Prenotazione
JOIN Volo v ON b.ID_Volo = v.ID_Volo
JOIN Aeroporto a ON v.Aeroporto_Partenza = a.Codice_Aeroporto
WHERE a.Codice_Aeroporto = 'LHR'
    AND pr.Stato_Prenotazione = 'Confermata'
    AND b.Stato_Biglietto = 'Valido'
ORDER BY v.Ora_Partenza, p.Cognome, p.Nome;


-- 8. Storico modifiche prenotazioni

SELECT
    mp.ID_Modifica,
    mp.ID_Prenotazione,
    p.PNR,
    mp.Data_Modifica,
    mp.Tipo_Modifica,
    mp.Dettagli_Modifica,
    mp.Costo_Modifica,
    mp.Stato_Modifica
FROM Modifica_Prenotazione mp
JOIN Prenotazione p ON mp.ID_Prenotazione = p.ID_Prenotazione
ORDER BY mp.Data_Modifica DESC;


-- 9. Controllo scali

SELECT
    s.ID_Prenotazione,
    p.PNR,
    s.Ordine_Scalo,
    v.Numero_Volo,
    v.Data_Volo,
    ap.Citta AS Partenza,
    aa.Citta AS Arrivo
FROM Scalo s
JOIN Prenotazione p ON s.ID_Prenotazione = p.ID_Prenotazione
JOIN Volo v ON s.ID_Volo = v.ID_Volo
JOIN Aeroporto ap ON v.Aeroporto_Partenza = ap.Codice_Aeroporto
JOIN Aeroporto aa ON v.Aeroporto_Arrivo = aa.Codice_Aeroporto
ORDER BY s.ID_Prenotazione, s.Ordine_Scalo;

--DATI ESEMPIO


-- Aeroporti

INSERT INTO Aeroporto (Codice_Aeroporto, Nome, Citta, Nazione, Fuso_Orario) VALUES
('FCO', 'Aeroporto Leonardo da Vinci', 'Roma', 'Italia', 'CET'),
('MXP', 'Aeroporto Malpensa', 'Milano', 'Italia', 'CET'),
('LHR', 'Heathrow Airport', 'Londra', 'Regno Unito', 'GMT'),
('JFK', 'John F. Kennedy Airport', 'New York', 'USA', 'EST');


-- Aerei

INSERT INTO Aereo (Modello, Capacita_Totale, Capacita_Economy, Capacita_Business, Capacita_First) VALUES
('Boeing 737', 180, 150, 20, 10),
('Airbus A320', 150, 120, 20, 10),
('Boeing 777', 300, 200, 70, 30);


-- Passeggeri

INSERT INTO Passeggero (Nome, Cognome, Data_Nascita, Documento_Identita, Telefono, Email, Codice_Fiscale) VALUES
('Luca', 'Rossi', '1985-02-15', 'AA1234567', '3331234567', 'luca.rossi@email.com', 'RSSLCU85B15H501A'),
('Maria', 'Bianchi', '1990-07-20', 'BB7654321', '3349876543', 'maria.bianchi@email.com', 'BNCMRA90L60F205Y'),
('Giuseppe', 'Verdi', '1978-12-10', 'IT456789123', '+39-333-4567891', 'giuseppe.verdi@email.com', 'VRDGPP78T10H501X');


-- Voli

INSERT INTO Volo
(Numero_Volo, Data_Volo, Data_Arrivo, Ora_Partenza, Ora_Arrivo, Prezzo_Economy, Prezzo_Business, Prezzo_First, ID_Aereo, Aeroporto_Partenza, Aeroporto_Arrivo)
VALUES
('AZ100', '2025-09-01', '2025-09-01', '08:00:00', '10:00:00', 120.00, 300.00, 600.00, 1, 'FCO', 'MXP'),
('AZ101', '2025-09-01', '2025-09-01', '12:00:00', '14:00:00', 150.00, 350.00, 650.00, 2, 'MXP', 'LHR'),
('DL200', '2025-09-02', '2025-09-02', '18:00:00', '22:00:00', 500.00, 1200.00, 2500.00, 3, 'LHR', 'JFK'),
('DL300', '2025-09-01', '2025-09-03', '22:00:00', '06:00:00', 550.00, 1250.00, 2600.00, 3, 'LHR', 'JFK');


-- Prenotazioni

INSERT INTO Prenotazione (PNR, Stato_Prenotazione, Prezzo_Totale, ID_Passeggero) VALUES
('ABC123', 'Confermata', 120.00, 1),
('DEF456', 'Confermata', 150.00, 2),
('GHI789', 'Confermata', 500.00, 3),
('JKL012', 'Confermata', 550.00, 1); -- volo multi-giorno


-- Pagamenti

INSERT INTO Pagamento (Importo, Metodo_Pagamento, Stato_Pagamento, ID_Prenotazione) VALUES
(120.00, 'Carta_Credito', 'Completato', 1),
(150.00, 'PayPal', 'Completato', 2),
(500.00, 'Bonifico', 'Completato', 3),
(550.00, 'Carta_Debito', 'Completato', 4);


-- Biglietti

INSERT INTO Biglietto (Numero_Posto, Classe_Servizio, Check_In_Effettuato, Stato_Biglietto, ID_Prenotazione, ID_Volo) VALUES
('12A', 'Business', FALSE, 'Valido', 1, 1),
('1B', 'Business', FALSE, 'Valido', 2, 2),
('2C', 'First', FALSE, 'Valido', 3, 3),
('15D', 'Economy', FALSE, 'Valido', 4, 4);


-- Scali

INSERT INTO Scalo (ID_Prenotazione, ID_Volo, Ordine_Scalo) VALUES
(1, 1, 1),
(1, 2, 2);

--Modifica prenotazione (esempio per query 8)
INSERT INTO Modifica_Prenotazione (ID_Prenotazione, Tipo_Modifica, Dettagli_Modifica, Costo_Modifica, Stato_Modifica) VALUES
(1, 'Modifica_Classe', 'Upgrade Economy->Business', 50.00, 'Completata');


-- FINE DUMP SQL
